# Template for building and deploying DataModelViewer
# Usage: reference this template in your pipeline and provide required parameters

parameters:
  - name: bicepTemplateFile
    type: string
    default: 'Infrastructure/main.bicep'
  - name: azureServiceConnectionName
    type: string
    default: ''
  - name: azureResourceGroupName
    type: string
    default: ''
  - name: azureLocation
    type: string
    default: ''
  - name: websitePassword
    type: string
    default: ''
  - name: websiteSessionSecret
    type: string
    default: ''
  - name: websiteName
    type: string
    default: ''
  - name: azureTenantId
    type: string
    default: ''
  - name: azureClientId
    type: string
    default: ''
  - name: azureClientSecret
    type: string
    default: ''
  - name: dataverseUrl
    type: string
    default: ''

stages:
  - stage: Build
    jobs:
      - job: BuildApp
        displayName: "Build App"
        steps:
          - task: UseDotNet@2
            displayName: "Use .Net 8"
            inputs:
              version: 8.x

          - script: dotnet restore
            displayName: "Restore NuGet"

          - script: dotnet build --no-restore --configuration Release
            displayName: "Build generator"

          - script: dotnet run --project Generator/Generator.csproj --OutputFolder $(Build.SourcesDirectory)/Website/generated
            displayName: "Generate files"
            env:
              AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
              AZURE_CLIENT_ID: ${{ parameters.azureClientId }}
              AZURE_CLIENT_SECRET: ${{ parameters.azureClientSecret }}
              DataverseUrl: ${{ parameters.dataverseUrl }}

          - task: NodeTool@0
            displayName: "Install Node.js"
            inputs:
              versionSpec: "20.x"
              displayName: "Install Node.js"

          - script: npm install && npm run build && mv .next/static .next/standalone/.next/static && mv public .next/standalone/public
            workingDirectory: $(Build.SourcesDirectory)/Website
            displayName: "Build Next.js app"

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/Website/.next/standalone"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/WebApp.zip"
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/WebApp.zip
            artifact: WebApp

  - stage: Deploy
    jobs:
      - job: DeployApp
        displayName: "Deploy App"
        steps:
          - task: AzureCLI@2
            displayName: "Create Azure Resources"
            inputs:
              azureSubscription: ${{ parameters.azureServiceConnectionName }}
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              inlineScript: |
                az group create --name ${{ parameters.azureResourceGroupName }} --location ${{ parameters.azureLocation }}
                $jsonResult = az deployment group create --resource-group ${{ parameters.azureResourceGroupName }} --template-file ${{ parameters.bicepTemplateFile }} --parameters websitePassword=${{ parameters.websitePassword }} --parameters sessionSecret=${{ parameters.websiteSessionSecret }} --parameters solutionId=${{ parameters.websiteName }} | ConvertFrom-Json
                $webAppName = $jsonResult.properties.outputs.webAppName.value
                Write-Host "##vso[task.setvariable variable=webAppName]$webAppName"

          - download: current
            artifact: WebApp

          - task: AzureWebApp@1
            inputs:
              azureSubscription: ${{ parameters.azureServiceConnectionName }}
              appType: "webAppLinux"
              appName: $(webAppName)
              package: "$(Pipeline.Workspace)/WebApp/WebApp.zip"
