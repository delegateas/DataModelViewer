# Template for DataModelViewer build steps
# Usage: reference this template in a job's steps section

parameters:
  - name: bicepTemplateFile
    type: string
    default: 'Infrastructure/main.bicep'
  - name: azureTenantId
    type: string
    default: ''
  - name: azureClientId
    type: string
    default: ''
  - name: azureClientSecret
    type: string
    default: ''
  - name: dataverseUrl
    type: string
    default: ''
  - name: adoWikiName
    type: string
    default: ''
  - name: adoWikiPagePath
    type: string
    default: ''

steps:
  - task: UseDotNet@2
    displayName: "Use .Net 8"
    inputs:
      version: 8.x

  - script: dotnet restore
    displayName: "Restore NuGet"
    workingDirectory: $(Build.SourcesDirectory)

  - script: dotnet build --no-restore --configuration Release
    displayName: "Build generator"
    workingDirectory: $(Build.SourcesDirectory)

  - script: dotnet run --project Generator/Generator.csproj --OutputFolder $(Build.SourcesDirectory)/Website/generated
    displayName: "Generate files"
    env:
      AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
      AZURE_CLIENT_ID: ${{ parameters.azureClientId }}
      AZURE_CLIENT_SECRET: ${{ parameters.azureClientSecret }}
      DataverseUrl: ${{ parameters.dataverseUrl }}

  - script: |
      set -uo pipefail
      API_VER="7.1"

      # Generated folder location in DMV
      OUT_FILE="generated/Introduction.md"

      # The encoding removes all spaces, weird charachters etc. with encoded values like %20 for space.
      WIKI_NAME_ENCODED=$(python3 -c "import urllib.parse, os; print(urllib.parse.quote(os.environ['WIKI_NAME']))")
      ENCODED_PATH=$(python3 -c "import urllib.parse, os; print(urllib.parse.quote(os.environ['WIKI_PAGE_PATH']))")
    
      URL="${ORG_URL}${PROJECT}/_apis/wiki/wikis/${WIKI_NAME_ENCODED}/pages?path=${ENCODED_PATH}&includeContent=true&api-version=${API_VER}"
  
      # Debug: Print the constructed URL
      echo "Constructed URL: $URL"
      echo "ENCODED_PATH: $ENCODED_PATH"
      echo "ORG_URL: $ORG_URL"
      echo "PROJECT: $PROJECT"
      echo "WIKI_NAME: $WIKI_NAME"
      echo "ENCODED_WIKI_NAME: $WIKI_NAME_ENCODED"

      mkdir -p "$(dirname "$OUT_FILE")"
      # -w (wrap) 0 ensures the token is one line
      BASE64=$(printf ":%s" "$SYSTEM_ACCESSTOKEN" | base64 --wrap 0)

      # Headers are important https://learn.microsoft.com/en-us/rest/api/azure/devops/?view=azure-devops-rest-7.2
      # HTTP 2.0 (default) does not work hence the older (1.1) version used
      RESPONSE=$(curl \
        --silent \
        --show-error \
        --http1.1 \
        --header "Authorization: Basic ${BASE64}" \
        --header "Accept: application/json" \
        "$URL")

      # Check if it's valid JSON
      if echo "$RESPONSE" | jq . > /dev/null 2>&1; then
        echo "Response is valid JSON"
        
        # Check if it has content field
        if echo "$RESPONSE" | jq -e '.content' > /dev/null 2>&1; then
          echo "Response has .content field"
          echo "$RESPONSE" | jq -r '.content' > "$OUT_FILE"
          echo "Saved wiki page to $OUT_FILE"
        else
          echo "Response does not have .content field"
          echo "Available fields:"
          echo "$RESPONSE" | jq 'keys'
        fi
      else
        echo "Response is NOT valid JSON"
        echo "This might be an error message or HTML response"
      fi

      echo "Saved wiki page to $OUT_FILE"
    workingDirectory: $(Build.SourcesDirectory)/Website
    displayName: Download Introduction WiKi Page into TS project
    continueOnError: true
    env:
      ORG_URL: $(System.CollectionUri)
      PROJECT: $(System.TeamProject)
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      WIKI_NAME: ${{ parameters.adoWikiName}}
      WIKI_PAGE_PATH: ${{ parameters.adoWikiPagePath}}

  - task: NodeTool@0
    displayName: "Install Node.js"
    inputs:
      versionSpec: "20.x"
      displayName: "Install Node.js"

  - script: npm install && npm run build && mv .next/static .next/standalone/.next/static && mv public .next/standalone/public
    workingDirectory: $(Build.SourcesDirectory)/Website
    displayName: "Build Next.js app"


  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: "$(Build.SourcesDirectory)/Website/.next/standalone"
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/WebApp.zip"
      replaceExistingArchive: true

  - publish: $(Build.ArtifactStagingDirectory)/WebApp.zip
    artifact: WebApp
